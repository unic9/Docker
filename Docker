##Commands

docker --help
docker container COMMAND #it will show the list of commands for the container

docker container ls #it will show the list of running containers
docker container ls -a #it will show the list of running, stopped, and exit containers

#show current available images
docker images #will give the image repositories information in the machine
#Search for images 
docker search ubuntu
#Download images
docker pull ubuntu 

##to start docker
systemctl start docker

##to see the status of docker
systemctl status docker
ps -ef|grep docker

docker info

##to create a container
docker run <image>
##to start container
docker start container_name
##to stop container
docker stop container

##container naming
docker run --name container_name -it ubuntu //bin/bash 
##starting a stopped container
docker start container_name
##attaching a docker
docker attach container_name or container ID  (#we have to start container before attaching )
##creating demonised(detach or background running) containers
docker run --name container_name -d ubuntu //bin/sh -c "while true; do echo hello world; sleep 1; done"
##Fetch logs of a container(to watch current running stats of a container)
docker logs -f container_name

##to delete container
docker rm container_name


##to get into a interractive with image  
docker run -it ubuntu 

##to run in detach mode with out clossing(backgroung running)
docker run -d ubuntu

##to create mysql image
docker run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=123 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=123 -d centos/mysql-57-centos7

##to execute that image 
docker exec -it mysql-basic /bin/bash

##entry point

##to exec container without typing the container name or container ID we can reference -l to get information from the last executed container 
ex:

##to see all the processers running inside the container 
docker top container_name

##to inspect a container(to get all the information of the container)
docker inspect container_name
#to get only perticular details we can use grep
docker inspect container_name | grep -i ip (#we can get ip addres of the container)
*#to get perticular key value pairs details we can use (in flower brackets we can give any key details for information so that we get value)
docker inspect --format '{{ .NetworkSettings.IPAddress }}' container_name 
docker inspect --format '{{ .State.Running }}' container_name

##To run a command in a running container without attaching it we can use exec command
docker exec container_name
docker exec container_name hostname
docker exec -d container_name ls

##Display a live usage of containers : resource usage statistics
docker stats container_name apt-get update or apt-get install -y apache2

##To get real time events from the server(live updates)
docker events
docker events --filter [container|image|event|label|type|volume|network|daemon]
docker events --since '1h'
docker events --filter event=attach --filter event=die


##Renaming a container
docker rename test1 test2 (#we cant change container ID, we can only rename container name)


##Exposing our container with Port redirects(forwarding)
All ports are private by default
when u 'docker run -p <port>,.. that port becomes public
when u 'docker run -p ,..with out posrt number, all ports declared with EXPOSE become public
#{https://www.whitesourcesoftware.com/free-developer-tools/blog/docker-expose-port/} reference


##volume mount(Data volume)
A valoume is a specifically designed directory with one or more containers that Bypasses
the Union file System
-volumes can be shared and reused between containers
-A container does't have to be running to share its volumes
-changes to a volume are made directly
-volumes persist(to exist or to be prolonged) until no containers use them
-changes to the volume will not be included when u update an image.

#volumes declared from cmd-line
docker run --name test1 -it -v /usr/folder_name ubuntu /bin/bash

#Sharing Volumes across containers [Data containers]
-This is done using the --volumes-from flag for docker run
docker run --name test2 -it --volumes-from test1 ubuntu /bin/bash
docker run --name test2 -it --volumes-from test1 --volumes-from test0 ubuntu /bin/bash
-Sharing a directory between the host and container
docker run --name test1 -it -v /home/user/Docker:/data ubuntu


##Building Images Interactively(from container)
For example
-create a new container and make some changes
docker run --name kiran_container -it ubuntu
yum install vim
exit

-Inspect the changes
docker diff kiran_container

-commit and run your image
docker commit kiran_container
docker commit kiran_container myfirstimage
docker run -it <containerID>

-Tagging images
docker tag <newimageID> myfirstimage (#u cant change image ID, only container name can be changed)


##BUILD DOCKER IMAGES   (With Docker file)

-Create a Test directry and Dockerfile
mkdir test
cd test
vim Dockerfile        (#it opens file in vim editor)
    FROM ubuntu
    RUN apt-get update
    RUN apt-get -y install vim
    
-Build the image        (#to create a new container with new changes we use build option)
docker build -t myfirstimage

-Runing the built image       (#creating container from new image we created)
docker run -it myfirstimage

-List all the layers composing an image
docker history myfirstimage

##Docker File Instructions
-RUN : Run the command when the container is being build 
-CMD : Specifies the command to run when a container is launched, if values are specified during launch it will override the Dockerfile value 
       %CMD ["echo", "Hi"]

docker build -rm -t="kiran/dockerfiles" .
docker run -it kiran/dockerfiles

-ENTRYPOINT : same as RUN, arguments we specify on the docker run command line will be passed as arguments to the command specified in the ENTRYPOINT
              %ENTRYPOINT ["echo"'"hi"]
              
-WORKDIR : Provieds a way to set the working directry of the container and the ENTRYPOINT and/or CMD to be excecuted when a container is launched from a image
           % WORKDIR /usr/bin
           
-You can override the working directry at run time with the -W falg
docker run -it -W /var kiran/dockerfiles

-ENV : set Environment variables during the image build process 
       % ENV ORACLE_HOME/var
-USER : specifies a user that the image should run as
        % USER kumar
        
-You can override this at runtime by specifiying thr -u flag with 
docker run -it -u kumar kiran/dockerfiles

-VOLUMES (data volumes)
% VOLUME ["/data"]


-COPY :
Adds files and directorries from our build environment into our image 
COPY DUMMYFILE /data/DUMMYFILE
            it will add the DUMMYFILE file from the build (host machine) directory to /data in the image
            
-ADD :
similar to copy whereass it can extract archives
ADD latest.tar.gz /var/www/wordpress

-MAINTAINER 
Tells you who wrote the Dockerfile
MAINTAINER kiran kumar "robin@gmail.com"

-EXPOSE :
Tells Docker what ports are to be published in the image 
EXPOSE 8080

##Sample Dockerfile to setup apache2
FROM ubuntu:12.04
MAINAINER kiran
RUN apt-get update && apt-get install -y apache2 && apt-get clean && rm -rf /var/lib/apt/lists/*
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
EXPOSE 80
CMD ["/usr/sbin/apache2","-D", "FOREGROUND:]

to build image
docker build -t apacheimage -f ./Dockerfileapache .   (#If we have other name rather than Dockerfile we can build image in this image)

to run image
docker run -d -p 80:80 -v /var/www/html:/var/www/html apacheimage


1 video pending 










